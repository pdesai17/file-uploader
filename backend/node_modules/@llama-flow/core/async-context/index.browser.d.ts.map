{"version":3,"file":"index.browser.d.ts","names":[],"sources":["../src/async-context/index.browser.d.ts"],"sourcesContent":["export declare const createAsyncContext: <T>() => {\n    /**\n     * You must call `getContext()` in the top level of the workflow,\n     *  otherwise we will lose the async context of the workflow.\n     *\n     * @example\n     * ```\n     * workflow.handle([startEvent], async () => {\n     *   const { stream } = getContext(); // ✅ this is ok\n     *   await fetchData();\n     * });\n     *\n     * workflow.handle([startEvent], async () => {\n     *   await fetchData();\n     *   const { stream } = getContext(); // ❌ this is not ok\n     *   // we have no way\n     *   to know this code was originally part of the workflow\n     *   // w/o AsyncContext\n     * });\n     * ```\n     */\n    getStore: () => T | null;\n    run<R>(store: T, fn: () => R): R;\n};\n"],"mappings":";AAAA,IAAW,qBAuBV;CAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA"}