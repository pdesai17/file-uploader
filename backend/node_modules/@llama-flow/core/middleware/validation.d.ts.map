{"version":3,"file":"validation.d.ts","names":[],"sources":["../src/middleware/validation.d.ts"],"sourcesContent":["import { type Workflow, type WorkflowEvent, type WorkflowEventData } from \"@llama-flow/core\";\nexport type ValidationHandler<Validation extends [\n    inputs: WorkflowEvent<any>[],\n    output: WorkflowEvent<any>[]\n][], AcceptEvents extends WorkflowEvent<any>[], Result extends WorkflowEventData<any> | void> = (sendEvent: (...inputs: Array<Validation[number] extends infer Tuple ? Tuple extends [AcceptEvents, infer Outputs] ? Outputs extends WorkflowEvent<any>[] ? ReturnType<Outputs[number][\"with\"]> : never : never : never>) => void, ...events: {\n    [K in keyof AcceptEvents]: ReturnType<AcceptEvents[K][\"with\"]>;\n}) => Result | Promise<Result>;\nexport type WithValidationWorkflow<Validation extends [\n    inputs: WorkflowEvent<any>[],\n    output: WorkflowEvent<any>[]\n][]> = {\n    strictHandle<const AcceptEvents extends WorkflowEvent<any>[], Result extends ReturnType<WorkflowEvent<any>[\"with\"]> | void>(accept: AcceptEvents, handler: ValidationHandler<Validation, AcceptEvents, Result>): void;\n};\nexport declare function withValidation<const Validation extends [\n    inputs: WorkflowEvent<any>[],\n    outputs: WorkflowEvent<any>[]\n][], WorkflowLike extends Workflow>(workflow: WorkflowLike, validation: Validation): WithValidationWorkflow<Validation> & WorkflowLike;\n"],"mappings":";;;AACA,IAAW,oBAAoB;CAAC;CAAG,MAAM;CAAQ,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA;AACjD,IAAW,yBAAqB;CAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA;AAChC,IAAW,iBAAiB;CAAC;CAAE,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA"}