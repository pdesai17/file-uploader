{"version":3,"file":"trace-events.d.ts","names":[],"sources":["../src/core/event.d.ts","../src/core/context.d.ts","../src/middleware/trace-events/create-handler-decorator.d.ts","../src/middleware/trace-events/run-once.d.ts","../src/middleware/trace-events.d.ts"],"sourcesContent":["declare const opaqueSymbol: unique symbol;\nexport type InferWorkflowEventData<T> = T extends WorkflowEventData<infer U> ? U : T extends WorkflowEvent<infer U> ? U : never;\nexport type WorkflowEventData<Data, DebugLabel extends string = string> = {\n    get data(): Data;\n} & {\n    readonly [opaqueSymbol]: DebugLabel;\n};\nexport type WorkflowEvent<Data, DebugLabel extends string = string> = {\n    debugLabel?: DebugLabel;\n    with(data: Data): WorkflowEventData<Data, DebugLabel>;\n    include(event: unknown): event is WorkflowEventData<Data, DebugLabel>;\n} & {\n    readonly [opaqueSymbol]: DebugLabel;\n};\nexport type WorkflowEventConfig<DebugLabel extends string = string> = {\n    debugLabel?: DebugLabel;\n};\nexport declare const workflowEvent: <Data = void, DebugLabel extends string = string>(config?: WorkflowEventConfig<DebugLabel>) => WorkflowEvent<Data, DebugLabel>;\nexport declare const eventSource: (instance: unknown) => WorkflowEvent<any> | undefined;\nexport {};\n","import type { WorkflowEvent, WorkflowEventData } from \"@llama-flow/core\";\nimport { type Subscribable } from \"./utils\";\nexport type Handler<AcceptEvents extends WorkflowEvent<any>[], Result extends WorkflowEventData<any> | void> = (...event: {\n    [K in keyof AcceptEvents]: ReturnType<AcceptEvents[K][\"with\"]>;\n}) => Result | Promise<Result>;\ntype BaseHandlerContext = {\n    abortController: AbortController;\n    handler: Handler<WorkflowEvent<any>[], any>;\n    inputEvents: WorkflowEvent<any>[];\n    inputs: WorkflowEventData<any>[];\n    outputs: WorkflowEventData<any>[];\n    prev: HandlerContext;\n    next: Set<HandlerContext>;\n    root: HandlerContext;\n};\ntype SyncHandlerContext = BaseHandlerContext & {\n    async: false;\n    pending: null;\n};\ntype AsyncHandlerContext = BaseHandlerContext & {\n    async: true;\n    pending: Promise<WorkflowEventData<any> | void> | null;\n};\nexport type HandlerContext = AsyncHandlerContext | SyncHandlerContext;\nexport type ContextNext = (context: HandlerContext, next: (context: HandlerContext) => void) => void;\nexport type WorkflowContext = {\n    get stream(): ReadableStream<WorkflowEventData<any>>;\n    get signal(): AbortSignal;\n    sendEvent: (...events: WorkflowEventData<any>[]) => void;\n    __internal__call_send_event: Subscribable<[\n        event: WorkflowEventData<any>,\n        handlerContext: HandlerContext\n    ], void>;\n};\nexport declare const _executorAsyncLocalStorage: {\n    getStore: () => WorkflowContext | undefined;\n    run<R>(store: WorkflowContext, fn: () => R): R;\n};\nexport declare function getContext(): WorkflowContext;\nexport type ExecutorParams = {\n    listeners: ReadonlyMap<WorkflowEvent<any>[], Set<Handler<WorkflowEvent<any>[], WorkflowEventData<any> | void>>>;\n};\nexport declare const createContext: ({ listeners, }: ExecutorParams) => WorkflowContext;\nexport {};\n","import type { Handler, WorkflowEvent, WorkflowEventData } from \"@llama-flow/core\";\nimport type { HandlerContext } from \"../../core/context\";\nexport declare const decoratorRegistry: Map<string, {\n    handlers: WeakSet<Handler<WorkflowEvent<any>[], WorkflowEventData<any> | void>>;\n    debugLabel: string;\n    getInitialValue: () => any;\n    onBeforeHandler: (handler: Handler<WorkflowEvent<any>[], WorkflowEventData<any> | void>, handlerContext: Readonly<HandlerContext>, metadata: any) => Handler<WorkflowEvent<any>[], WorkflowEventData<any> | void>;\n    onAfterHandler: (metadata: any) => any;\n}>;\nexport declare function createHandlerDecorator<Metadata>(config: {\n    debugLabel?: string;\n    getInitialValue: () => Metadata;\n    onBeforeHandler: (handler: Handler<WorkflowEvent<any>[], WorkflowEventData<any> | void>, handlerContext: HandlerContext, metadata: Metadata) => Handler<WorkflowEvent<any>[], WorkflowEventData<any> | void>;\n    onAfterHandler: (metadata: Metadata) => Metadata;\n}): <const AcceptEvents extends WorkflowEvent<any>[], Result extends ReturnType<WorkflowEvent<any>[\"with\"]> | void, Fn extends Handler<AcceptEvents, Result>>(handler: Fn) => Fn;\n","export declare const runOnce: <const AcceptEvents extends import(\"../../core\").WorkflowEvent<any>[], Result extends ReturnType<import(\"../../core\").WorkflowEvent<any>[\"with\"]> | void, Fn extends import(\"../../core\").Handler<AcceptEvents, Result>>(handler: Fn) => Fn;\n","import { type Handler, type WorkflowContext, type WorkflowEvent, type WorkflowEventData } from \"@llama-flow/core\";\nimport { createHandlerDecorator } from \"./trace-events/create-handler-decorator\";\nimport { runOnce } from \"./trace-events/run-once\";\nexport declare function getEventOrigins(eventData: WorkflowEventData<any>, context?: WorkflowContext): [WorkflowEventData<any>, ...WorkflowEventData<any>[]];\nexport type HandlerRef<AcceptEvents extends WorkflowEvent<any>[], Result extends ReturnType<WorkflowEvent<any>[\"with\"]> | void, Fn extends Handler<AcceptEvents, Result>> = {\n    get handler(): Fn;\n};\nexport declare function withTraceEvents<WorkflowLike extends {\n    handle<const AcceptEvents extends WorkflowEvent<any>[], Result extends ReturnType<WorkflowEvent<any>[\"with\"]> | void>(accept: AcceptEvents, handler: Handler<AcceptEvents, Result>): void;\n    createContext(): WorkflowContext;\n}>(workflow: WorkflowLike): Omit<WorkflowLike, \"handle\"> & {\n    handle<const AcceptEvents extends WorkflowEvent<any>[], Result extends ReturnType<WorkflowEvent<any>[\"with\"]> | void, Fn extends Handler<AcceptEvents, Result>>(accept: AcceptEvents, handler: Fn): HandlerRef<AcceptEvents, Result, Fn>;\n    substream<T extends WorkflowEventData<any>>(eventData: WorkflowEventData<any>, stream: ReadableStream<T>): ReadableStream<T>;\n};\nexport { createHandlerDecorator, runOnce };\n"],"mappings":";;;AAAA,IAAI,eAA8B,CAAC,EAAK;AAExC,IAAW,sBAAoB;CAAC;CAAI,MAAM;CAAM,MAAM;CAAY,MAAM;AAAE;AAC1E,IAAW,kBAAS;CAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA;;;;ACDpB,IAAW,YAAU;CAAC;CAAI,MAAM;CAAe,MAAM;CAAmB,MAAM;CAAc,MAAM;CAAG,MAAM;CAAY,MAAG;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA;AAC1H,IAAI,qBAAqB;CAAC;CAAI,MAAM;CAAiB,MAAM;CAAO,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA;AAClE,IAAI,qBAAqB,CAAC,IAAI,MAAA,kBAAA;AAC9B,IAAI,sBAAsB;CAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA;AAC1B,IAAW,iBAAiB;CAAC;CAAI,MAAG;CAAA,MAAA;AAAA;;;;ACGpC,IAAW,yBAAyB;CAAC;CAAG,MAAM;CAAU,MAAM;CAAG,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA;;;;;;;;;;;;;;;;;;AENjE,IAAW,kBAAkB;CAAC;CAAG,MAAM;CAAmB,MAAM;CAAiB,MAAM;CAAmB,MAAM;AAAkB;AAClI,IAAW,aAAa;CAAC;CAAG,MAAM;CAAe,MAAM;CAAe,MAAM;CAAY,MAAM;CAAc,MAAM;CAAQ,MAAM;CAAS,MAAM;AAAG;AAClJ,IAAW,kBAAU;CAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA"}