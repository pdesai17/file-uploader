{"version":3,"file":"consumer-BKe0ue3v.js","names":["stream: ReadableStream<unknown>","stream: ReadableStream<T>","events: T[]"],"sources":["../src/stream/consumer.ts"],"sourcesContent":["/**\n * A no-op function that consumes a stream of events and does nothing with them.\n *\n * Do not collect the raw stream from `workflow.createContext()`\n * or `getContext()`, it's infinite and will never finish\n */\nexport const nothing = async (\n  stream: ReadableStream<unknown>,\n): Promise<void> => {\n  await stream.pipeTo(\n    new WritableStream<unknown>({\n      write: () => {\n        // no-op\n      },\n    }),\n  );\n};\n\n/**\n * Collects all events from a stream and returns them as an array.\n *\n * Do not collect the raw stream from `workflow.createContext()`\n * or getContext()`, it's infinite and will never finish.\n */\nexport const collect = async <T>(stream: ReadableStream<T>): Promise<T[]> => {\n  const events: T[] = [];\n  await stream.pipeTo(\n    new WritableStream<T>({\n      write: (event) => {\n        events.push(event);\n      },\n    }),\n  );\n  return events;\n};\n"],"mappings":";;;;;;;AAMA,MAAa,UAAU,OACrBA,WACkB;AAClB,OAAM,OAAO,OACX,IAAI,eAAwB,EAC1B,OAAO,MAAM,CAEZ,EACF,GACF;AACF;;;;;;;AAQD,MAAa,UAAU,OAAUC,WAA4C;CAC3E,MAAMC,SAAc,CAAE;AACtB,OAAM,OAAO,OACX,IAAI,eAAkB,EACpB,OAAO,CAAC,UAAU;AAChB,SAAO,KAAK,MAAM;CACnB,EACF,GACF;AACD,QAAO;AACR"}