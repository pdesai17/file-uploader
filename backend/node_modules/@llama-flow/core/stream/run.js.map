{"version":3,"file":"run.js","names":["workflow: Workflow","inputEvent: WorkflowEventData<Input>","outputEvent: WorkflowEvent<Output>"],"sources":["../src/stream/run.ts"],"sourcesContent":["import type {\n  WorkflowEvent,\n  WorkflowEventData,\n  Workflow,\n} from \"@llama-flow/core\";\nimport { collect } from \"./consumer\";\nimport { until } from \"./until\";\n\n/**\n * Runs a workflow with a specified input event and returns the first matching event of the specified output type.\n *\n * @example\n * ```ts\n * const result = await runWorkflow(workflow, startEvent.with(\"42\"), stopEvent);\n * console.log(`Result: ${result.data === 1 ? 'positive' : 'negative'}`);\n * ```\n */\nexport async function runWorkflow<Input, Output>(\n  workflow: Workflow,\n  inputEvent: WorkflowEventData<Input>,\n  outputEvent: WorkflowEvent<Output>,\n): Promise<WorkflowEventData<Output>> {\n  const { stream, sendEvent } = workflow.createContext();\n\n  // Send the initial event\n  sendEvent(inputEvent);\n\n  // Create a stream until we get the output event\n  const untilStream = until(stream, outputEvent);\n\n  // Find the first matching event\n  for await (const event of untilStream) {\n    if (outputEvent.include(event)) {\n      return event as WorkflowEventData<Output>;\n    }\n  }\n\n  throw new Error(`No matching ${outputEvent.toString()} event found`);\n}\n\n/**\n * Runs a workflow with a specified input event and collects all events until a specified output event is encountered.\n * Returns an array containing all events including the final output event.\n *\n * @example\n * ```ts\n * const allEvents = await runAndCollect(workflow, startEvent.with(\"42\"), stopEvent);\n * const finalEvent = allEvents[allEvents.length - 1];\n * console.log(`Result: ${finalEvent.data === 1 ? 'positive' : 'negative'}`);\n * ```\n */\nexport async function runAndCollect<Input, Output>(\n  workflow: Workflow,\n  inputEvent: WorkflowEventData<Input>,\n  outputEvent: WorkflowEvent<Output>,\n): Promise<WorkflowEventData<any>[]> {\n  const { stream, sendEvent } = workflow.createContext();\n\n  // Send the initial event\n  sendEvent(inputEvent);\n\n  // Collect all events until the output event\n  return await collect(until(stream, outputEvent));\n}\n\n/**\n * Runs a workflow with a specified input event and returns an async iterable stream of all events\n * until a specified output event is encountered.\n *\n * This allows processing events one by one without collecting them all upfront.\n *\n * @example\n * ```ts\n * const eventStream = runStream(workflow, startEvent.with(\"42\"), stopEvent);\n * for await (const event of eventStream) {\n *   console.log(`Processing event: ${event}`);\n *   // Do something with each event as it arrives\n * }\n * ```\n */\nexport function runStream<Input, Output>(\n  workflow: Workflow,\n  inputEvent: WorkflowEventData<Input>,\n  outputEvent: WorkflowEvent<Output>,\n): AsyncIterable<WorkflowEventData<any>> {\n  const { stream, sendEvent } = workflow.createContext();\n\n  // Send the initial event\n  sendEvent(inputEvent);\n\n  // Return the stream that runs until the output event is encountered\n  return until(stream, outputEvent);\n}\n"],"mappings":";;;;;;;;;;;;;AAiBA,eAAsB,YACpBA,UACAC,YACAC,aACoC;CACpC,MAAM,EAAE,QAAQ,WAAW,GAAG,SAAS,eAAe;AAGtD,WAAU,WAAW;CAGrB,MAAM,cAAc,MAAM,QAAQ,YAAY;AAG9C,YAAW,MAAM,SAAS,YACxB,KAAI,YAAY,QAAQ,MAAM,CAC5B,QAAO;AAIX,OAAM,IAAI,OAAO,cAAc,YAAY,UAAU,CAAC;AACvD;;;;;;;;;;;;AAaD,eAAsB,cACpBF,UACAC,YACAC,aACmC;CACnC,MAAM,EAAE,QAAQ,WAAW,GAAG,SAAS,eAAe;AAGtD,WAAU,WAAW;AAGrB,QAAO,MAAM,QAAQ,MAAM,QAAQ,YAAY,CAAC;AACjD;;;;;;;;;;;;;;;;AAiBD,SAAgB,UACdF,UACAC,YACAC,aACuC;CACvC,MAAM,EAAE,QAAQ,WAAW,GAAG,SAAS,eAAe;AAGtD,WAAU,WAAW;AAGrB,QAAO,MAAM,QAAQ,YAAY;AAClC"}