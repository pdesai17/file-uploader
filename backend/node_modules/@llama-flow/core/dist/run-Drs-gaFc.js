//#region src/stream/until.ts
const isWorkflowEvent = (value) => value != null && typeof value === "object" && "with" in value && "include" in value;
function until(stream, cond) {
	let reader = null;
	return new ReadableStream({
		start: () => {
			reader = stream.getReader();
		},
		pull: async (controller) => {
			const { done, value } = await reader.read();
			if (value) controller.enqueue(value);
			if (done) {
				reader.releaseLock();
				reader = null;
				controller.close();
			} else if (isWorkflowEvent(cond) && cond.include(value)) {
				reader.releaseLock();
				controller.close();
			} else if (typeof cond === "function" && await cond(value)) {
				reader.releaseLock();
				controller.close();
			}
		}
	});
}

//#endregion
//#region src/stream/run.ts
/**
* Runs a workflow with a specified input event and returns the first matching event of the specified output type.
*
* @example
* ```ts
* const result = await runWorkflow(workflow, startEvent.with("42"), stopEvent);
* console.log(`Result: ${result.data === 1 ? 'positive' : 'negative'}`);
* ```
*/
async function runWorkflow(workflow, inputEvent, outputEvent) {
	const { stream, sendEvent } = workflow.createContext();
	sendEvent(inputEvent);
	const untilStream = until(stream, outputEvent);
	for await (const event of untilStream) if (outputEvent.include(event)) return event;
	throw new Error(`No matching ${outputEvent.toString()} event found`);
}

//#endregion
export { runWorkflow };
//# sourceMappingURL=run-Drs-gaFc.js.map