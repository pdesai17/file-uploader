//#region src/core/event.d.ts
declare const opaqueSymbol: unique symbol;
type InferWorkflowEventData<T> = T extends WorkflowEventData<infer U> ? U : T extends WorkflowEvent<infer U> ? U : never;
type WorkflowEventData<Data, DebugLabel extends string = string> = {
    get data(): Data;
} & {
    readonly [opaqueSymbol]: DebugLabel;
};
type WorkflowEvent<Data, DebugLabel extends string = string> = {
    debugLabel?: DebugLabel;
    with(data: Data): WorkflowEventData<Data, DebugLabel>;
    include(event: unknown): event is WorkflowEventData<Data, DebugLabel>;
} & {
    readonly [opaqueSymbol]: DebugLabel;
};
type WorkflowEventConfig<DebugLabel extends string = string> = {
    debugLabel?: DebugLabel;
};
declare const workflowEvent: <Data = void, DebugLabel extends string = string>(config?: WorkflowEventConfig<DebugLabel>) => WorkflowEvent<Data, DebugLabel>;
declare const eventSource: (instance: unknown) => WorkflowEvent<any> | undefined;

//#endregion
//#region src/core/utils.d.ts
type Subscribable<Args extends any[], R> = {
    subscribe: (callback: (...args: Args) => R) => () => void;
    publish: (...args: Args) => void;
};

//#endregion
//#region src/core/context.d.ts
type Handler<AcceptEvents extends WorkflowEvent<any>[], Result extends WorkflowEventData<any> | void> = (...event: {
    [K in keyof AcceptEvents]: ReturnType<AcceptEvents[K]["with"]>;
}) => Result | Promise<Result>;
type BaseHandlerContext = {
    abortController: AbortController;
    handler: Handler<WorkflowEvent<any>[], any>;
    inputEvents: WorkflowEvent<any>[];
    inputs: WorkflowEventData<any>[];
    outputs: WorkflowEventData<any>[];
    prev: HandlerContext;
    next: Set<HandlerContext>;
    root: HandlerContext;
};
type SyncHandlerContext = BaseHandlerContext & {
    async: false;
    pending: null;
};
type AsyncHandlerContext = BaseHandlerContext & {
    async: true;
    pending: Promise<WorkflowEventData<any> | void> | null;
};
type HandlerContext = AsyncHandlerContext | SyncHandlerContext;
type WorkflowContext = {
    get stream(): ReadableStream<WorkflowEventData<any>>;
    get signal(): AbortSignal;
    sendEvent: (...events: WorkflowEventData<any>[]) => void;
    __internal__call_send_event: Subscribable<[
        event: WorkflowEventData<any>,
        handlerContext: HandlerContext
    ], void>;
};
declare function getContext(): WorkflowContext;

//#endregion
//#region src/core/workflow.d.ts
type Workflow = {
    handle<const AcceptEvents extends WorkflowEvent<any>[], Result extends ReturnType<WorkflowEvent<any>["with"]> | void>(accept: AcceptEvents, handler: Handler<AcceptEvents, Result>): void;
    createContext(): WorkflowContext;
};
declare const createWorkflow: () => Workflow;

//#endregion
export { Handler, InferWorkflowEventData, Workflow, WorkflowContext, WorkflowEvent, WorkflowEventConfig, WorkflowEventData, createWorkflow, eventSource, getContext, workflowEvent };
//# sourceMappingURL=index.d.cts.map