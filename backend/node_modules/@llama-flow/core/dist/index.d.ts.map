{"version":3,"file":"index.d.ts","names":[],"sources":["../src/core/event.d.ts","../src/core/utils.d.ts","../src/core/context.d.ts","../src/core/workflow.d.ts"],"sourcesContent":["declare const opaqueSymbol: unique symbol;\nexport type InferWorkflowEventData<T> = T extends WorkflowEventData<infer U> ? U : T extends WorkflowEvent<infer U> ? U : never;\nexport type WorkflowEventData<Data, DebugLabel extends string = string> = {\n    get data(): Data;\n} & {\n    readonly [opaqueSymbol]: DebugLabel;\n};\nexport type WorkflowEvent<Data, DebugLabel extends string = string> = {\n    debugLabel?: DebugLabel;\n    with(data: Data): WorkflowEventData<Data, DebugLabel>;\n    include(event: unknown): event is WorkflowEventData<Data, DebugLabel>;\n} & {\n    readonly [opaqueSymbol]: DebugLabel;\n};\nexport type WorkflowEventConfig<DebugLabel extends string = string> = {\n    debugLabel?: DebugLabel;\n};\nexport declare const workflowEvent: <Data = void, DebugLabel extends string = string>(config?: WorkflowEventConfig<DebugLabel>) => WorkflowEvent<Data, DebugLabel>;\nexport declare const eventSource: (instance: unknown) => WorkflowEvent<any> | undefined;\nexport {};\n","import type { WorkflowEvent, WorkflowEventData } from \"./event\";\nexport declare const isEventData: (data: unknown) => data is WorkflowEventData<any>;\nexport declare const isPromiseLike: (value: unknown) => value is PromiseLike<unknown>;\nexport declare function flattenEvents(acceptEventTypes: WorkflowEvent<any>[], inputEventData: WorkflowEventData<any>[]): WorkflowEventData<any>[];\nexport type Subscribable<Args extends any[], R> = {\n    subscribe: (callback: (...args: Args) => R) => () => void;\n    publish: (...args: Args) => void;\n};\nexport declare function createSubscribable<Args extends any[], R>(): Subscribable<Args, R>;\n","import type { WorkflowEvent, WorkflowEventData } from \"@llama-flow/core\";\nimport { type Subscribable } from \"./utils\";\nexport type Handler<AcceptEvents extends WorkflowEvent<any>[], Result extends WorkflowEventData<any> | void> = (...event: {\n    [K in keyof AcceptEvents]: ReturnType<AcceptEvents[K][\"with\"]>;\n}) => Result | Promise<Result>;\ntype BaseHandlerContext = {\n    abortController: AbortController;\n    handler: Handler<WorkflowEvent<any>[], any>;\n    inputEvents: WorkflowEvent<any>[];\n    inputs: WorkflowEventData<any>[];\n    outputs: WorkflowEventData<any>[];\n    prev: HandlerContext;\n    next: Set<HandlerContext>;\n    root: HandlerContext;\n};\ntype SyncHandlerContext = BaseHandlerContext & {\n    async: false;\n    pending: null;\n};\ntype AsyncHandlerContext = BaseHandlerContext & {\n    async: true;\n    pending: Promise<WorkflowEventData<any> | void> | null;\n};\nexport type HandlerContext = AsyncHandlerContext | SyncHandlerContext;\nexport type ContextNext = (context: HandlerContext, next: (context: HandlerContext) => void) => void;\nexport type WorkflowContext = {\n    get stream(): ReadableStream<WorkflowEventData<any>>;\n    get signal(): AbortSignal;\n    sendEvent: (...events: WorkflowEventData<any>[]) => void;\n    __internal__call_send_event: Subscribable<[\n        event: WorkflowEventData<any>,\n        handlerContext: HandlerContext\n    ], void>;\n};\nexport declare const _executorAsyncLocalStorage: {\n    getStore: () => WorkflowContext | undefined;\n    run<R>(store: WorkflowContext, fn: () => R): R;\n};\nexport declare function getContext(): WorkflowContext;\nexport type ExecutorParams = {\n    listeners: ReadonlyMap<WorkflowEvent<any>[], Set<Handler<WorkflowEvent<any>[], WorkflowEventData<any> | void>>>;\n};\nexport declare const createContext: ({ listeners, }: ExecutorParams) => WorkflowContext;\nexport {};\n","import { type WorkflowEvent } from \"./event\";\nimport { type Handler, type WorkflowContext } from \"./context\";\nexport type Workflow = {\n    handle<const AcceptEvents extends WorkflowEvent<any>[], Result extends ReturnType<WorkflowEvent<any>[\"with\"]> | void>(accept: AcceptEvents, handler: Handler<AcceptEvents, Result>): void;\n    createContext(): WorkflowContext;\n};\nexport declare const createWorkflow: () => Workflow;\n"],"mappings":";AAAA,IAAI,eAA8B,CAAC,CAAI;AACvC,IAAW,yBAAyB;CAAC;CAAG,MAAM;CAAG,MAAM;CAAmB,MAAM;CAAG,MAAM;CAAG,MAAM;CAAe,MAAM;AAAE;AACzH,IAAW,oBAAoB;CAAC;CAAG,MAAM;CAAM,MAAM;CAAY,MAAM;AAAG;AAC1E,IAAW,gBAAS;CAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA;AACpB,IAAI,sBAAA,CAAA,GAAA,MAAA,UAAA;AACJ,IAAW,gBAA4B;CAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA;AACvC,IAAC,cAAA,CAAA,GAAA,MAAA,aAAA;;;;ACFD,IAAW,eAAe;CAAC;CAAI,MAAM;CAAM,MAAM;CAAC,MAAA;AAAA;;;;ACFlD,IAAW,UAAU;CAAC;CAAG,MAAM;CAAe,MAAM;CAAmB,MAAM;CAAc,MAAM;CAAG,MAAM;CAAY,MAAI;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA;AAC1H,IAAI,qBAAqB;CAAC;CAAI,MAAM;CAAiB,MAAM;CAAO,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA;AAClE,IAAI,qBAAqB,CAAC,IAAI,MAAA,kBAAA;AAC9B,IAAI,sBAAsB;CAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA;AAC1B,IAAW,iBAAiB;CAAC;CAAI,MAAG;CAAA,MAAA;AAAA;AAEpC,IAAW,kBAAkB;CAAC;CAAI,MAAG;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA;AAKrC,IAAW,aAAa,CAAA,IAAA,MAAA,eAAA;;;;ACXxB,IAAW,WAAW;CAAC;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA;AACvB,IAAW,iBAAiC,CAAC,GAAG,MAAM,QAAS"}