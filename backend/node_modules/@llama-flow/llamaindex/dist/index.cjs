Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@llama-flow/core');
var consumer = require('@llama-flow/core/stream/consumer');
var store = require('@llama-flow/core/middleware/store');

const eventWeakMap = new WeakMap();
const eventDataWeakMap = new WeakMap();
const coreEventWeakMap = new WeakMap();
class WorkflowEvent {
    constructor(data){
        if (!eventWeakMap.has(this.constructor)) {
            eventWeakMap.set(this.constructor, core.workflowEvent({
                debugLabel: this.constructor.name
            }));
        }
        this.data = data;
        this.displayName = this.constructor.name;
        const coreEvent = eventWeakMap.get(this.constructor).with(data);
        eventDataWeakMap.set(this, coreEvent);
        coreEventWeakMap.set(coreEvent, this);
    }
    toString() {
        return this.displayName;
    }
}
class StartEvent extends WorkflowEvent {
    constructor(data){
        super(data);
    }
}
class StopEvent extends WorkflowEvent {
    constructor(data){
        super(data);
    }
}
class Workflow {
    #workflow;
    addStep(parameters, handler) {
        this.#workflow.handle(parameters.inputs.map((i)=>{
            if (!eventWeakMap.has(i)) {
                eventWeakMap.set(i, core.workflowEvent({
                    debugLabel: i.name
                }));
            }
            return eventWeakMap.get(i);
        }), (...events)=>{
            const context = core.getContext();
            const contextData = this.#workflow.getStore();
            const result = handler({
                sendEvent: (event)=>{
                    const coreEvent = eventDataWeakMap.get(event);
                    context.sendEvent(coreEvent);
                },
                get stream () {
                    return context.stream.pipeThrough(new TransformStream({
                        transform: (event, controller)=>{
                            controller.enqueue(coreEventWeakMap.get(event));
                        }
                    }));
                },
                get data () {
                    return contextData;
                }
            }, ...events.map((e)=>coreEventWeakMap.get(e)));
            if (result instanceof Promise) {
                return result.then((result)=>result instanceof WorkflowEvent ? eventDataWeakMap.get(result) : undefined);
            } else {
                return result instanceof WorkflowEvent ? eventDataWeakMap.get(result) : undefined;
            }
        });
    }
    run(start, context) {
        const { sendEvent, stream, getStore } = this.#workflow.createContext(context);
        const startEvent = new StartEvent(start);
        const coreStartEvent = eventDataWeakMap.get(startEvent);
        sendEvent(coreStartEvent);
        if (!eventWeakMap.has(StopEvent)) {
            eventWeakMap.set(StopEvent, core.workflowEvent({
                debugLabel: StopEvent.name
            }));
        }
        const stopEvent = eventWeakMap.get(StopEvent);
        const result = stream.pipeThrough(new TransformStream({
            transform: (event, controller)=>{
                const ev = coreEventWeakMap.get(event);
                controller.enqueue(ev);
                if (stopEvent.include(event)) {
                    controller.terminate();
                }
            }
        }));
        Object.assign(result, {
            then: async (resolve, reject)=>{
                try {
                    const events = await consumer.collect(result);
                    resolve(events.at(-1));
                } catch (error) {
                    reject(error);
                }
            },
            catch: async (reject)=>{
                try {
                    await consumer.collect(result);
                } catch (error) {
                    reject(error);
                }
            },
            finally: async (resolve)=>{
                try {
                    await consumer.collect(result);
                } finally{
                    resolve();
                }
            },
            get data () {
                return getStore();
            }
        });
        return result;
    }
    constructor(){
        this.#workflow = store.withStore((data)=>data, core.createWorkflow());
    }
}

exports.StartEvent = StartEvent;
exports.StopEvent = StopEvent;
exports.Workflow = Workflow;
exports.WorkflowEvent = WorkflowEvent;
